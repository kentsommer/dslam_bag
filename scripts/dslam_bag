#!/usr/bin/env python

import argparse
import dslam_ecto_bridge.dslam_image_bridge as image_bridge
import dslam_bag.dslam_bag_vision_utils as vision_utils
#import dslam_ecto_bridge.beachhead as beachhead
import ecto
from ecto.opts import scheduler_options, run_plasm
from ecto_opencv.highgui import imshow, FPSDrawer
import ecto_ros, ecto_ros.ecto_sensor_msgs as ecto_sensor_msgs
import dslam_ecto_utils
import dslam_ecto_vision
import os
import rospy
import sys
import time
import subprocess
import threading

##############################################################################
# Arguments
##############################################################################

parser = argparse.ArgumentParser(description='Testies.')

# our local command line args
parser.add_argument('-front', '--frontcam', default=False, action='store_true', help='Use front camera')
parser.add_argument('-back', '--backcam', default=False, action='store_true', help='Use back camera')
parser.add_argument('-v', '--viz', default=False, action='store_true', help='show the plasm graphs')
parser.add_argument('-s', '--show', default=False, action='store_true', help='Show Image Feeds')
parser.add_argument('--verbose', default=False, action='store_true', help='Verbose command line output of image receipts')
#myargs = rospy.myargv(argv=sys.argv)

options = parser.parse_args()

##############################################################################
# Cells
##############################################################################

if options.frontcam or options.backcam:
    image_sourceBack = image_bridge.DSlamSource('image_source', semantic_name="back_image_stream", verbose=options.verbose, ip='192.168.1.4', port=5555)
    image_sourceFront = image_bridge.DSlamSource('image_source', semantic_name="front_image_stream", verbose=options.verbose, ip='192.168.1.3', port=5555)

# Raw image display
imshow_leftBack = imshow('show_raw_left', name='raw_leftBack')
imshow_rightBack = imshow('show_raw_right', name='raw_rightBack')
imshow_leftFront = imshow('show_raw_left', name='raw_leftFront')
imshow_rightFront = imshow('show_raw_right', name='raw_rightFront')
# Converters
mat2ImgMsgLeftBack = vision_utils.Mat2ImageStamped("mat2Img_leftBack")
mat2ImgMsgRightBack = vision_utils.Mat2ImageStamped("mat2Img_rightBack")
mat2ImgMsgLeftFront = vision_utils.Mat2ImageStamped("mat2Img_leftFront")
mat2ImgMsgRightFront = vision_utils.Mat2ImageStamped("mat2Img_rightFront")
# Publisher
ImagePub = ecto_sensor_msgs.Publisher_Image
pub_imageLeftFront = ImagePub("front_left_image_publisher", topic_name='/dslam/camera/front/left/image_raw')
pub_imageRightFront = ImagePub("front_right_image_publisher", topic_name='/dslam/camera/front/right/image_raw')
pub_imageLeftBack = ImagePub("back_left_image_publisher", topic_name='/dslam/camera/back/left/image_raw')
pub_imageRightBack = ImagePub("back_right_image_publisher", topic_name='/dslam/camera/back/right/image_raw')

##############################################################################
# Graph
##############################################################################

graph = []  # graph cannot be empty!
if options.backcam:
    graph += [
        image_sourceBack['left']      >> mat2ImgMsgLeftBack['image'],    # noqa @IgnorePep8
        image_sourceBack['time']      >> mat2ImgMsgLeftBack['time'],     # noqa @IgnorePep8
        image_sourceBack['right']     >> mat2ImgMsgRightBack['image'],   # noqa @IgnorePep8
        image_sourceBack['time']      >> mat2ImgMsgRightBack['time'],    # noqa @IgnorePep8
        mat2ImgMsgLeftBack['image']   >> pub_imageLeftBack['input'],     # noqa @IgnorePep8
        mat2ImgMsgRightBack['image']  >> pub_imageRightBack['input'],    # noqa @IgnorePep8
        #image_sourceBack['left']      >> imshow_leftBack['image'],      # noqa @IgnorePep8
        #image_sourceBack['right']     >> imshow_rightBack['image'],     # noqa @IgnorePep8
    ]
if options.show:
    graph += [
    image_sourceBack['left']      >> imshow_leftBack['image'],           # noqa @IgnorePep8
    image_sourceBack['right']     >> imshow_rightBack['image']           # noqa @IgnorePep8
]
if options.frontcam:
    graph += [
        image_sourceFront['left']     >> mat2ImgMsgLeftFront['image'],   # noqa @IgnorePep8
        image_sourceFront['time']     >> mat2ImgMsgLeftFront['time'],    # noqa @IgnorePep8
        image_sourceFront['right']    >> mat2ImgMsgRightFront['image'],  # noqa @IgnorePep8
        image_sourceFront['time']     >> mat2ImgMsgRightFront['time'],   # noqa @IgnorePep8
        mat2ImgMsgLeftFront['image']  >> pub_imageLeftFront['input'],    # noqa @IgnorePep8
        mat2ImgMsgRightFront['image'] >> pub_imageRightFront['input'],   # noqa @IgnorePep8
        #image_sourceFront['left']     >> imshow_leftFront['image'],      # noqa @IgnorePep8
        #image_sourceFront['right']    >> imshow_rightFront['image'],     # noqa @IgnorePep8
    ]
if options.show:
    graph += [
        image_sourceFront['left']     >> imshow_leftFront['image'],      # noqa @IgnorePep8
        image_sourceFront['right']    >> imshow_rightFront['image'],     # noqa @IgnorePep8
    ]
if options.frontcam and not options.backcam:
    subprocess.Popen("rosbag record -q /odom /dslam/camera/front/left/image_raw /dslam/camera/front/right/image_raw /tf /output", shell=True)
if options.backcam and not options.frontcam:
    subprocess.Popen("rosbag record -q /odom /dslam/camera/back/left/image_raw /dslam/camera/back/right/image_raw /tf /output", shell=True)
if options.frontcam and options.backcam:
    subprocess.Popen("rosbag record -q /odom /dslam/camera/front/left/image_raw /dslam/camera/front/right/image_raw /dslam/camera/back/left/image_raw /dslam/camera/back/right/image_raw /tf /output", shell=True)

if not options.backcam and not options.frontcam:
    sys.exit("\n Dude select something as an input -> specifically a combination of cameras: --front and --back are options \n ...pick one! Oh and then re-run me \n")

plasm = ecto.Plasm()
plasm.connect(graph)

##############################################################################
# Ros
##############################################################################

if options.frontcam or options.backcam:
    ecto_ros.init(sys.argv, "dslam_bag")
    try:
        description = rospy.get_param("/robot_description")
        with open('RobotDescription.xml', 'w') as file_:
            file_.write(description)
    except KeyError:
        print("Description not available")
# if options.frontcam and options.backcam:
#     ecto_ros.init(sys.argv, "dslam_ecto_bridge")
# if options.frontcam and not options.backcam:
#     ecto_ros.init(sys.argv, "dslam_ecto_bridgeFront")
# if options.backcam and not options.frontcam:
#     ecto_ros.init(sys.argv, "dslam_ecto_bridgeBack")
#rospy.init_node("dslam_ecto_bridge")

##############################################################################
# Scheduler
##############################################################################

scheduler         = ecto.Scheduler(plasm)                                                     # noqa @IgnorePep8
scheduler_thread  = threading.Thread(name="image_bridge", target=scheduler.execute_threaded)  # noqa @IgnorePep8

##############################################################################
# Execution
##############################################################################

if options.viz:
    ecto.view_plasm(plasm)

# lay down a imshow receiver in the main thread for parallel imshows to hook onto
if options.show:
    dslam_ecto_vision.opencv_init()

scheduler_threads = dslam_ecto_utils.SchedulerThreads([scheduler_thread], disable_qt_management=not options.show)
scheduler_threads.spin()
print scheduler.stats()
